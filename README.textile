h1. mojito - Next level ruby webframework

p. Mojito is a lean and simple webframework. 

p. As the name implies mojito derives from cuba (https://github.com/soveran/cuba). Many thanks to Michel and the cuba sources for giving me some major insights on web-application-simplicity!

h2. Installing

bc. $ gem install mojito

h2. Your first application

p. The easiest way to start with mojito is to use a plain @config.ru@ script to develop and configure your application. 

bc.. $ cat config.ru
require 'mojito'

FirstApp = Mojito.application do
	on GET(), PATH('/hello/:name') do |name|
		write "Hello #{name}! How are you?"
		content_type :plain
		ok!
	end
end

run FirstApp

p. This installs a handler for GET requests to a path of /hello/ followed by a name (actually this notation catches everything but a slash '/'). You can start this application by running @rackup@ from the same directory:

bc. $ rackup

p. This starts a http-server on port 9292. Now try to call your handler through curl:

bc. $ curl http://localhost:9292/hello/Fred
Hello Fred! How are you?

p. Please be aware that although this way is easy to start with it tends to get messy very quick if your project becomes more complex, so please read on...

h2. Structure of a real-world application

p. The above call to @Mojito.application@ actually created a class and included most of Mojitos foundation methods, so that you could start writing your application code without wondering what features you want to include in your application. As a tribute to simplicity (one of the most important I think), another helper method @Mojito.base_application@ can be used to create a blank application class, which only includes modules that are strictly necessary. Instead of using those methods you can also write out all of the generated classes code:

bc.. class FirstApp
	include Mojito
	routes do
		on GET(), PATH('/hello/:name' do |name|
			...
		end
	end
end

p. which is not only perfectly legal but also favoured, when you need any special behaviour on your application class.

p. Although you can actually use any structure you want (including a single-file application), some of them are more useful than others. My preferred way of developing Mojito applications is to reuse most of the concepts found in production development with rubygems and git.

h2. Behind the scenes

p. tbd

h3. Matchers

h3. Renderers

h3. Helpers

h2. Deployment

p. tbd

h2. Contributing to mojito
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
* Fork the project.
* Start a feature/bugfix branch.
* Commit and push until you are happy with your contribution.
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

h2. Copyright

p. Copyright (c) 2012 Max Trense. See LICENSE.txt for further details.

